#!/usr/bin/env python

import sys
import os
import logging
import subprocess

if os.getuid() != 0:
    print "Get root pal!"
    sys.exit(2)

# get run path
binpath = os.path.abspath(sys.argv[0])
if os.path.islink(binpath):
    binpath = os.readlink(binpath)

# this is set up by kigen ebuild
if binpath == '/usr/sbin/kigen':
    # kigen is installed (likely by portage)
    libdir = '/usr/share/kigen'
    # TODO: find another way to get the pyv, this won't work on debian
    pyv = os.popen('eselect python show --python2').read().strip()
    sys.path.append("/usr/lib/"+pyv+"/site-packages/kigen/modules")
else:
    # assume we run from current dir
    libdir = os.path.dirname(binpath)
    sys.path.append(libdir+'/modules')

# import kigen modules path
#sys.path.append(libdir)

# parse cli arguments
cliargs = sys.argv[1:]

# color hat trick
if "--nocolor" in cliargs or "-n" in cliargs:
    from nocolor import green, turquoise, red, yellow, white
    os.environ['KIGEN_STDOUT'] = '1'
else:
    try:
        from portage.output import green, turquoise, red, yellow, white
        os.environ['KIGEN_STDOUT'] = '0'
    except:
        from nocolor import green, turquoise, red, yellow, white
        os.environ['KIGEN_STDOUT'] = '1'

# kigen modules are ready to be called
from config import master_config, temp
from cliparser import *
from utils.misc import *
from utils.shell import *

# parse command line parameters
target, cli, verbose = parse()

# remove previous logfile
if os.path.isfile(verbose['logfile']):
    os.remove(verbose['logfile'])
# create empty logfile
#open(cli['logfile'], 'w').close()

# set logfile for DBUG logging
logging.basicConfig(filename=verbose['logfile'],level=logging.DEBUG)
logging.debug('target is ' + target)
logging.debug(cli)
logging.debug(verbose)

# parse kigen config file
kigen_conf = cli['config']
if os.path.isfile(kigen_conf):
    master_config_temp = parse_config_file(kigen_conf)
    master_config.update(master_config_temp)
else:
    print 'err: missing ' + red(kigen_conf)
    sys.exit(2)

# set default kernel sources
kerneldir = '/usr/src/linux'
if 'kernel-sources' in master_config:
    # if set grab value from config file
    kerneldir = master_config['kernel-sources']

# Funtoo bootupdate integration
from initramfs.bootupdate import get_boot_initrd
bootupdateinitrd = get_boot_initrd()
if bootupdateinitrd:
    bootupdateset = True
else:
    bootupdateset = False

# what am I?
arch = identify_arch()
logging.debug('Building on ' + arch)

# which Portage flavor?
flavor = identify_flavor()
logging.debug(flavor)

# show flavor on arch info
print green(' * ') + white(flavor) + ' on ' + white(arch)

# get kernel version from the Makefile source itself
if not os.path.isdir(kerneldir):
    print red('error') + ': ' + kerneldir + ' does not exist.'
    sys.exit(2)
KV = get_kernel_version(kerneldir)
if KV is 'none': 
    print red('error') + ': ' + kerneldir+'/Makefile not found'
    sys.exit(2)

try:
    # try creating temp dirs
    os.makedirs(temp['root'])
    os.makedirs(temp['work'])
    os.makedirs(temp['cache'])
    os.makedirs(temp['distfiles'])
except:
    # don't mind
    pass

# ensure temp['work'] is clean
import shutil
if os.path.isdir(temp['work']):
    shutil.rmtree(temp['work'])
    os.makedirs(temp['work'])

# --nocache
if cli['nocache'] is True:
    if os.path.isdir(temp['cache']):
        shutil.rmtree(temp['cache'])
        os.makedirs(temp['cache'])

# run the target
if target == 'kernel' or target == 'k':
    from kernel.kernel import kernel
    kobj = kernel(kerneldir,            \
                master_config,          \
                arch,                   \
                KV,                     \
                cli,                    \
                temp,                   \
                verbose)
    kobj.build()

    # copy kernel/system.map to /boot
    if cli['noboot'] is False:
    
         print green(' * produced ') + '/boot/System.map-kigen-'+arch+'-'+KV
         process('cp %s %s' % (kerneldir + '/System.map', '/boot/System.map-kigen-'+arch+'-'+KV), verbose)
    
         if cli['rename'] is '':
             print green(' * produced ') + '/boot/kernel-kigen-'+arch+'-'+KV,
             process('cp %s %s' % (kerneldir + '/arch/x86/boot/bzImage', '/boot/kernel-kigen-'+arch+'-'+KV), verbose)
         else:
             print green(' * produced ') + '/boot/' + cli['rename'],
             process('cp %s /boot/%s' % (kerneldir + '/arch/x86/boot/bzImage', cli['rename']), verbose)
         if cli['initramfs'] is not '':
             print ' with an ' + white('embedded') + ' initramfs'
         else:
             print
    
    # leave /boot alone but tell the user where to find his kernel/system.map
    elif cli['noboot'] is True:
        logging.debug(kerneldir+'/System.map')
        print green(' * produced ') + kerneldir+'/System.map'
    
        logging.debug(kerneldir+'/arch/x86/boot/bzImage')
        print green(' * produced ') + kerneldir+'/arch/x86/boot/bzImage',
        if cli['initramfs'] is not '':
            print 'with an ' + white('embedded') + ' initramfs'
        else:
            print

if target == 'initramfs' or target == 'i':
    from initramfs.initramfs import initramfs
    iobj = initramfs(kerneldir,         \
                arch,                   \
                KV,                     \
                libdir,                 \
                master_config,          \
                cli,                    \
                temp,                   \
                bootupdateset,          \
                bootupdateinitrd,       \
                verbose)
    iobj.build()

    # copy initramfs to /boot
    if cli['noboot'] is False:
        if cli['rename'] is '':
            print green(' * produced ') + '/boot/initramfs-kigen-'+arch+'-'+KV
            process('cp %s/initramfs-cpio.gz %s/initramfs-kigen-%s-%s' % (temp['cache'], '/boot', arch, KV), verbose)
        else:
            print green(' * produced ') + '/boot/' + cli['rename']
            process('cp %s/initramfs-cpio.gz %s' % (temp['cache'], cli['rename']), verbose)
    
    # leave /boot alone but tell the user where to find his initramfs
    elif cli['noboot'] is True:
        logging.debug(temp['cache']+'/initramfs-cpio.gz')
        print green(' * produced ') + temp['cache']+'/initramfs-cpio.gz'

# TODO unset os.environ['KIGEN_STDOUT']?

sys.exit(0)


#!/usr/bin/env python2.6

import sys
import os
import logging
import subprocess

if os.getuid() != 0:
    print "Get rool pal!"
    sys.exit(2)

# import /libs
binpath = os.path.abspath(sys.argv[0])
if os.path.islink(binpath):
    binpath = os.readlink(binpath)
# this is set up by kigen ebuild
if binpath == '/usr/sbin/kgen':
    # kigen is installed (likely on portage only) for now
    libdir = '/usr/share/kigen'
    # TODO: find another way to get the pyv, this works only for portage barely on debian/arch
    pyv = os.popen('eselect python show --python2').read().strip()
    sys.path.append("/usr/lib/"+pyv+"/site-packages/kigen")
else:
    libdir = os.path.dirname(binpath)
    sys.path.append(libdir+'/kigen')

# import python libs
sys.path.append(libdir)

# hat trick
cliargs = sys.argv[1:]
if "--nocolor" in cliargs or "-n" in cliargs:
    from nocolor import green, turquoise, red, yellow, white
    os.environ['KGEN_STDOUT'] = '1'
else:
    try:
        from portage.output import green, turquoise, red, yellow, white
        os.environ['KGEN_STDOUT'] = '0'
    except:
        from nocolor import green, turquoise, red, yellow, white
        os.environ['KGEN_STDOUT'] = '1'

# kgen modules are ready to be called
from config import master_config
from kgen.config import temp
import kgen.cliparser
from utils.shell import *
from utils.misc import *

if len(sys.argv) < 1:
    kgen.cliparser.print_usage()
    sys.exit(2)

# parse command line parameters
cli, verbose = kgen.cliparser.parse()

# setup logfile
if os.path.isfile(cli['logfile']):
    os.remove(cli['logfile'])
logging.basicConfig(filename=cli['logfile'],level=logging.DEBUG)
logging.debug(cli)

# parse kigen config file
kigen_conf = cli['config']
if os.path.isfile(kigen_conf):
    master_config_temp = parse_config_file(kigen_conf)
    master_config.update(master_config_temp)
else:
    print 'missing file: ' + red(kigen_conf) + '.'
    sys.exit(2)

# set default kernel sources
kerneldir = '/usr/src/linux'
if 'kernel-sources' in master_config:
    # if set grab value from config file
    kerneldir = master_config['kernel-sources']

# what am I?
arch = identify_arch()
logging.debug('Building on ' + arch)

# which Portage flavor?
flavor = identify_flavor()
logging.debug(flavor)

# show flavor on arch info
print green(' * ') + white(flavor) + ' on ' + white(arch)

# get kernel version from the Makefile source itself
if not os.path.isdir(kerneldir):
    print red('error') + ': ' + kerneldir + ' does not exist.'
    sys.exit(2)
KV = get_kernel_version(kerneldir)
if KV is 'none':
    print red('error') + ': ' + kerneldir+'/Makefile not found'
    sys.exit(2)

try:
    process('mkdir -p %s' % temp['root'],  verbose)
except:
    # don't mind
    pass

from kgen.kernel import kernel
kobj = kernel(  kerneldir,      \
                master_config,  \
                arch,           \
                KV,             \
                cli,            \
                temp,           \
                verbose)
kobj.build()

# copy kernel/system.map to /boot
if cli['noboot'] is False:

     print green(' * produced ') + '/boot/System.map-kigen-'+arch+'-'+KV
     process('cp %s %s' % (kerneldir + '/System.map', '/boot/System.map-kigen-'+arch+'-'+KV), verbose)

     if cli['rename'] is '':
         print green(' * produced ') + '/boot/kernel-kigen-'+arch+'-'+KV,
         process('cp %s %s' % (kerneldir + '/arch/x86/boot/bzImage', '/boot/kernel-kigen-'+arch+'-'+KV), verbose)
     else:
         print green(' * produced ') + '/boot/' + cli['rename'],
         process('cp %s /boot/%s' % (kerneldir + '/arch/x86/boot/bzImage', cli['rename']), verbose)
     if cli['initramfs'] is not '':
         print ' with an ' + white('embedded') + ' initramfs'
     else:
         print

# leave /boot alone but tell the user where to find his kernel/system.map
elif cli['noboot'] is True:
    logging.debug(kerneldir+'/System.map')
    print green(' * produced ') + kerneldir+'/System.map'

    logging.debug(kerneldir+'/arch/x86/boot/bzImage')
    print green(' * produced ') + kerneldir+'/arch/x86/boot/bzImage',
    if cli['initramfs'] is not '':
        print ' with an ' + white('embedded') + ' initramfs'
    else:
        print

# TODO unset os.environ['KGEN_STDOUT']?

sys.exit(0)

